---
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import { getCollection } from 'astro:content';

const posts = (await getCollection('blog'))
  .filter(post => !post.data.draft)
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

const featuredPosts = posts.filter(post => post.data.featured);
const regularPosts = posts.filter(post => !post.data.featured);

// Get unique tags
const allTags = [...new Set(posts.flatMap(post => post.data.tags))].sort();
---

<Layout 
  title="Blog - Your Blog" 
  description="Discover insights on modern web development, cloud technologies, and digital innovation. Stay updated with the latest trends and best practices."
>
  <Header />
  
  <main class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
    <!-- Page Header -->
    <div class="text-center mb-12">
      <h1 class="text-4xl font-bold text-gray-900 dark:text-white mb-4">Blog</h1>
      <p class="text-xl text-gray-600 dark:text-gray-300 max-w-2xl mx-auto">
        Insights on modern web development, cloud technologies, and digital innovation
      </p>
    </div>

    <!-- Search and Filter -->
    <div class="mb-8 space-y-4">
      <div class="relative max-w-md">
        <input 
          type="text" 
          id="search-input"
          placeholder="Search posts..." 
          class="w-full px-4 py-2 pl-10 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:text-white"
        />
        <svg class="absolute left-3 top-2.5 h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
        </svg>
      </div>
      
      <div class="flex flex-wrap gap-2">
        <button class="tag-filter active px-3 py-1 text-sm rounded-full border border-blue-600 bg-blue-600 text-white transition-colors" data-tag="all">
          All
        </button>
        {allTags.map(tag => (
          <button class="tag-filter px-3 py-1 text-sm rounded-full border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:border-blue-600 hover:text-blue-600 dark:hover:text-blue-400 transition-colors" data-tag={tag}>
            {tag}
          </button>
        ))}
      </div>
    </div>

    <!-- Featured Posts -->
    {featuredPosts.length > 0 && (
      <section class="mb-12">
        <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-6">Featured Posts</h2>
        <div class="grid gap-8 md:grid-cols-2">
          {featuredPosts.map((post) => (
            <article class="post-card bg-white dark:bg-gray-800 rounded-lg shadow-md hover:shadow-lg transition-shadow border border-gray-200 dark:border-gray-700" data-tags={post.data.tags.join(',')}>
              <div class="p-6">
                <div class="flex items-center text-sm text-gray-500 dark:text-gray-400 mb-3">
                  <span class="bg-blue-600 text-white px-2 py-1 rounded text-xs font-medium mr-3">Featured</span>
                  <time datetime={post.data.pubDate.toISOString()}>
                    {post.data.pubDate.toLocaleDateString('en-US', {
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric'
                    })}
                  </time>
                </div>
                
                <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-3">
                  <a href={`/blog/${post.slug}/`} class="hover:text-blue-600 dark:hover:text-blue-400 transition-colors">
                    {post.data.title}
                  </a>
                </h3>
                
                <p class="text-gray-600 dark:text-gray-300 mb-4">
                  {post.data.description}
                </p>
                
                <div class="flex items-center justify-between">
                  <div class="flex items-center">
                    <div class="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center text-white text-sm font-medium">
                      {post.data.author.charAt(0).toUpperCase()}
                    </div>
                    <span class="ml-2 text-sm text-gray-600 dark:text-gray-400">{post.data.author}</span>
                  </div>
                  
                  <div class="flex flex-wrap gap-1">
                    {post.data.tags.slice(0, 2).map(tag => (
                      <span class="px-2 py-1 text-xs bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400 rounded">
                        {tag}
                      </span>
                    ))}
                  </div>
                </div>
              </div>
            </article>
          ))}
        </div>
      </section>
    )}

    <!-- All Posts -->
    <section>
      <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-6">All Posts</h2>
      <div class="space-y-6" id="posts-container">
        {regularPosts.map((post) => (
          <article class="post-card bg-white dark:bg-gray-800 rounded-lg shadow-md hover:shadow-lg transition-shadow border border-gray-200 dark:border-gray-700 p-6" data-tags={post.data.tags.join(',')}>
            <div class="flex flex-col md:flex-row md:items-center justify-between mb-4">
              <div class="flex items-center text-sm text-gray-500 dark:text-gray-400">
                <time datetime={post.data.pubDate.toISOString()}>
                  {post.data.pubDate.toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                  })}
                </time>
                <span class="mx-2">•</span>
                <div class="flex items-center">
                  <div class="w-6 h-6 bg-blue-600 rounded-full flex items-center justify-center text-white text-xs font-medium mr-2">
                    {post.data.author.charAt(0).toUpperCase()}
                  </div>
                  <span>{post.data.author}</span>
                </div>
              </div>
              
              <div class="flex flex-wrap gap-1 mt-2 md:mt-0">
                {post.data.tags.map(tag => (
                  <span class="px-2 py-1 text-xs bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400 rounded">
                    {tag}
                  </span>
                ))}
              </div>
            </div>
            
            <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-3">
              <a href={`/blog/${post.slug}/`} class="hover:text-blue-600 dark:hover:text-blue-400 transition-colors">
                {post.data.title}
              </a>
            </h3>
            
            <p class="text-gray-600 dark:text-gray-300 mb-4">
              {post.data.description}
            </p>
            
            <a href={`/blog/${post.slug}/`} class="text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 text-sm font-medium transition-colors">
              Read more →
            </a>
          </article>
        ))}
      </div>
      
      <!-- No results message -->
      <div id="no-results" class="hidden text-center py-12">
        <p class="text-gray-600 dark:text-gray-400">No posts found matching your search criteria.</p>
      </div>
    </section>
  </main>
  
  <Footer />
</Layout>

<script>
  // Search and filter functionality
  const searchInput = document.getElementById('search-input') as HTMLInputElement;
  const tagFilters = document.querySelectorAll('.tag-filter');
  const postCards = document.querySelectorAll('.post-card');
  const noResults = document.getElementById('no-results');
  
  let currentTag = 'all';
  let currentSearch = '';
  
  function filterPosts() {
    let visibleCount = 0;
    
    postCards.forEach(card => {
      const cardElement = card as HTMLElement;
      const title = cardElement.querySelector('h3')?.textContent?.toLowerCase() || '';
      const description = cardElement.querySelector('p')?.textContent?.toLowerCase() || '';
      const tags = cardElement.dataset.tags?.split(',') || [];
      
      const matchesSearch = currentSearch === '' || 
        title.includes(currentSearch) || 
        description.includes(currentSearch);
      
      const matchesTag = currentTag === 'all' || tags.includes(currentTag);
      
      if (matchesSearch && matchesTag) {
        cardElement.style.display = 'block';
        visibleCount++;
      } else {
        cardElement.style.display = 'none';
      }
    });
    
    if (noResults) {
      noResults.style.display = visibleCount === 0 ? 'block' : 'none';
    }
  }
  
  // Search input handler
  searchInput?.addEventListener('input', (e) => {
    currentSearch = (e.target as HTMLInputElement).value.toLowerCase();
    filterPosts();
  });
  
  // Tag filter handlers
  tagFilters.forEach(filter => {
    filter.addEventListener('click', (e) => {
      const button = e.target as HTMLButtonElement;
      
      // Update active state
      tagFilters.forEach(f => {
        f.classList.remove('active', 'bg-blue-600', 'text-white');
        f.classList.add('border-gray-300', 'dark:border-gray-600', 'text-gray-700', 'dark:text-gray-300');
      });
      
      button.classList.add('active', 'bg-blue-600', 'text-white');
      button.classList.remove('border-gray-300', 'dark:border-gray-600', 'text-gray-700', 'dark:text-gray-300');
      
      currentTag = button.dataset.tag || 'all';
      filterPosts();
    });
  });
</script>
